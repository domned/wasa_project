# list of chats for user(sorted in rev cron), each element
# of list contains username or group name, prof pic, eta of
# last mess preview of last txt or icon for im
# user can start convo with any other, auto add to list
# can search via username and see all usernames
# can create group and add others, not admin cannot search
# or add themselves to group, can leave group
# convo returns all messages in rev cron with timestamp, content, sender
# username or checkmark(sender/receiver), reaction and user who posted
# WASAText
# Addendum
# OpenAPI for simplified login
---
openapi: 3.0.3
info:
    title: 'Wasatext'
    description: |-
        A simple chat application
        that allows users to create groups,
        start conversations, and send messages.
    version: '1'

security:
    - bearerAuth: []

components:
    securitySchemes:
        bearerAuth:
            type: http
            scheme: bearer
            bearerFormat: JWT

    schemas:
        User:
            type: object
            properties:
                id:
                    type: string
                    example: 'f2555a8a-2e66-4326-9588-20e7e298d615'
                    description: UUID of the user
                username:
                    type: string
                    example: 'Alice'
                    pattern: '^.*?$'
                    minLength: 3
                    maxLength: 16
                picture:
                    type: string
                    example: 'https://example.com/avatar.jpg'
                    description: URL to user's profile picture
            required:
                - id
                - username

        Conversation:
            type: object
            properties:
                id:
                    type: string
                    example: 'c0c0c0c0-0000-0000-0000-000000000001'
                    description: UUID of the conversation
                name:
                    type: string
                    example: 'Group Chat'
                    description: Name of the conversation (empty for 1:1 chats)
                picture:
                    type: string
                    example: 'https://example.com/group-avatar.jpg'
                    description: URL to conversation's picture
                participants:
                    type: array
                    items:
                        $ref: '#/components/schemas/User'
                    description: List of users in the conversation
            required:
                - id
                - participants

        Message:
            type: object
            properties:
                id:
                    type: string
                    example: '85f9cc23-48d7-448d-9172-7d5fd9cd4858'
                    description: UUID of the message
                senderId:
                    type: string
                    example: 'f2555a8a-2e66-4326-9588-20e7e298d615'
                    description: UUID of the message sender
                text:
                    type: string
                    example: 'Hello, how are you?'
                    description: Content of the message
                senderUsername:
                    type: string
                    example: 'Alice'
                    description: Username of the message sender
            required:
                - id
                - senderId
                - text
                - senderUsername

        LoginRequest:
            type: object
            properties:
                name:
                    type: string
                    example: 'Alice'
                    pattern: '^.*?$'
                    minLength: 3
                    maxLength: 16
            required:
                - name

        LoginResponse:
            type: object
            properties:
                identifier:
                    type: string
                    example: 'f2555a8a-2e66-4326-9588-20e7e298d615'
                    description: UUID of the logged in user
            required:
                - identifier

        SendMessageRequest:
            type: object
            properties:
                content:
                    type: string
                    example: 'Hello everyone!'
                    description: Content of the message to send
            required:
                - content

        # Legacy schema for backward compatibility
        Chat:
            type: object
            properties:
                users:
                    type: string
                    description: name of the user or group
                pic:
                    type: string
                    description: group or profile picture
            required:
                - users

paths:
    /session:
        post:
            tags: ['login']
            summary: Logs in the user
            description: |-
                If the user does not exist, it will be created,
                and an identifier is returned.
                If the user exists, the user identifier is returned.
            operationId: doLogin
            requestBody:
                description: User details
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/LoginRequest'
                required: true
            responses:
                '201':
                    description: User log-in action successful
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/LoginResponse'
                '400':
                    description: 'Invalid input - name must be 3-16 characters'

    /users/{id}:
        parameters:
            - name: id
              in: path
              description: UUID of the user
              required: true
              schema:
                  type: string
                  format: uuid
        put:
            tags: ['user']
            summary: Set the user's username
            operationId: setMyUserName
            requestBody:
                description: New username as a JSON string
                content:
                    application/json:
                        schema:
                            type: string
                            minLength: 3
                            maxLength: 16
                            example: "Alice"
                required: true
            responses:
                '200':
                    description: Username updated successfully
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/User'
                '400':
                    description: Bad request - Invalid username or username already in use
                '500':
                    description: Internal server error

    /users/{id}/photo:
        parameters:
            - name: id
              in: path
              description: UUID of the user
              required: true
              schema:
                  type: string
                  format: uuid
        put:
            tags: ['user']
            summary: Set the user's profile picture
            operationId: setMyProfilePicture
            requestBody:
                description: Profile picture URL as a JSON string
                content:
                    application/json:
                        schema:
                            type: string
                            format: uri
                            example: "https://example.com/avatar.jpg"
                required: true
            responses:
                '200':
                    description: Profile picture updated successfully
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/User'
                '400':
                    description: Bad request - Invalid URL format
                '500':
                    description: Internal server error

    /users/{id}/context:
        parameters:
            - name: id
              in: path
              description: UUID of the user
              required: true
              schema:
                  type: string
                  format: uuid
        get:
            tags: ['user']
            summary: Get context reply
            description: Get a context-based reply for the user
            operationId: getContextReply
            responses:
                '200':
                    description: Context reply
                    content:
                        application/json:
                            schema:
                                type: string
                                example: "Context-based response"
                '500':
                    description: Internal server error

    /users/{id}/conversations:
        parameters:
            - name: id
              in: path
              description: UUID of the user
              required: true
              schema:
                  type: string
                  format: uuid
        get:
            tags: [conversations]
            summary: Get user's conversations
            description: Retrieve all conversations for the specified user
            operationId: getMyConversations
            responses:
                '200':
                    description: List of conversations
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/Conversation'
                '500':
                    description: Internal server error

    /users/{id}/conversations/{conversationId}:
        parameters:
            - name: id
              in: path
              description: ID of the user
              required: true
              schema:
                  type: string
            - name: conversationId
              in: path
              description: ID of the conversation
              required: true
              schema:
                  type: string
        get:
            tags: [conversations]
            summary: Open conversation
            operationId: getConversation
            parameters:
                - name: conversationName
                  in: query
                  description: name of the conversation
                  required: true
                  schema:
                      type: string
            responses:
                '200':
                    description: group list
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    users:
                                        type: array
                                        items:
                                            type: string
                                    admin:
                                        type: string
                '404':
                    description: no groups found
                '400':
                    description: bad request

    /users/{id}/conversations/{conversationId}/messages:
        parameters:
            - name: id
              in: path
              description: UUID of the user
              required: true
              schema:
                  type: string
                  format: uuid
            - name: conversationId
              in: path
              description: UUID of the conversation
              required: true
              schema:
                  type: string
                  format: uuid
        get:
            tags: [messages]
            summary: Get messages in a conversation
            description: Retrieve all messages in the specified conversation
            operationId: getMessages
            responses:
                '200':
                    description: List of messages in the conversation
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/Message'
                '500':
                    description: Internal server error

        post:
            tags: [messages]
            summary: Send a new message
            description: Send a new message to the specified conversation
            operationId: sendMessage
            requestBody:
                description: Message content
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/SendMessageRequest'
                required: true
            responses:
                '201':
                    description: Message sent successfully
                    content:
                        application/json:
                            schema:
                                type: string
                                description: UUID of the created message
                                example: "85f9cc23-48d7-448d-9172-7d5fd9cd4858"
                '400':
                    description: Bad request - Empty message content
                '404':
                    description: Conversation not found
                '500':
                    description: Internal server error

    /users:
        get:
            tags: [users]
            summary: Get list of all users
            description: Returns the list of all existing users in the system
            operationId: getUsersList
            responses:
                '200':
                    description: List of all users
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/User'
                '500':
                    description: Internal server error

    /users/{id}/conversations/{conversationId}/messages/{messageId}:
        parameters:
            - name: id
              in: path
              description: ID of the user
              required: true
              schema:
                  type: string
            - name: conversationId
              in: path
              description: ID of the conversation
              required: true
              schema:
                  type: string
            - name: messageId
              in: path
              description: ID of the message
              required: true
              schema:
                  type: string
        delete:
            tags: [messages]
            summary: delete a message sent by user
            responses:
                '204':
                    description: Deleted
                '404':
                    description: id not found
                '401':
                    description: Unauthorized

    /users/{id}/conversations/{convId}/messages/{msgId}/forward:
        parameters:
            - name: id
              in: path
              description: ID of the user
              required: true
              schema:
                  type: string
            - name: convId
              in: path
              description: ID of the conversation
              required: true
              schema:
                  type: string
            - name: msgId
              in: path
              description: ID of the message
              required: true
              schema:
                  type: string
        post:
            tags: [messages]
            summary: forward a message
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                content:
                                    type: string
                                    description: id of the conversation to forward to
                required: true
            responses:
                '201':
                    description: message forwarded
                    content:
                        application/json:
                            schema:
                                type: string
                                description: message id
                '400':
                    description: user id not found
                '401':
                    description: Unauthorized
                '404':
                    description: message not found
    /users/{id}/conversations/{convId}/messages/{msgId}/reaction:
        parameters:
            - name: id
              in: path
              description: ID of the user
              required: true
              schema:
                  type: string
            - name: convId
              in: path
              description: ID of the conversation
              required: true
              schema:
                  type: string
            - name: msgId
              in: path
              description: ID of the message
              required: true
              schema:
                  type: string
        post:
            tags: [messages]
            summary: react to a message
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                emoji:
                                    type: string
                                    description: emoji to react with
                required: true
            responses:
                '201':
                    description: reaction added
                    content:
                        application/json:
                            schema:
                                type: string
                                description: reaction id
                '400':
                    description: user id not found
                '401':
                    description: Unauthorized
                '404':
                    description: message not found

    /users/{id}/conversations/{convId}/messages/{msgId}/reaction/{reactionId}:
        parameters:
            - name: id
              in: path
              description: ID of the user
              required: true
              schema:
                  type: string
            - name: convId
              in: path
              description: ID of the conversation
              required: true
              schema:
                  type: string
            - name: msgId
              in: path
              description: ID of the message
              required: true
              schema:
                  type: string
            - name: reactionId
              in: path
              description: ID of the reaction
              required: true
              schema:
                  type: string
        delete:
            tags: [messages]
            summary: delete a reaction
            responses:
                '204':
                    description: Deleted
                '404':
                    description: id not found
                '401':
                    description: Unauthorized

    /users/{id}/conversations/{convId}/members:
        parameters:
            - name: id
              in: path
              description: ID of the user
              required: true
              schema:
                  type: string
            - name: convId
              in: path
              description: ID of the conversation
              required: true
              schema:
                  type: string
        post:
            tags: [conversations]
            summary: add a member to a conversation
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                name:
                                    type: string
                                    description: name of the user to add
                required: true
            responses:
                '201':
                    description: member added
                    content:
                        application/json:
                            schema:
                                type: string
                                description: member id
                '400':
                    description: user id not found
                '401':
                    description: Unauthorized
                '404':
                    description: conversation not found
        delete:
            tags: [conversations]
            summary: remove a member from a conversation
            responses:
                '204':
                    description: Deleted
                '404':
                    description: id not found
                '401':
                    description: Unauthorized
    /users/{id}/conversations/{convId}/name:
        parameters:
            - name: id
              in: path
              description: ID of the user
              required: true
              schema:
                  type: string
            - name: convId
              in: path
              description: ID of the conversation
              required: true
              schema:
                  type: string
        put:
            tags: [conversations]
            summary: change the name of a conversation
            requestBody:
                content:
                    application/json:
                        schema:
                            type: string
                            description: new name of the conversation
                required: true
            responses:
                '200':
                    description: name changed
                '400':
                    description: user id not found
                '401':
                    description: Unauthorized
                '404':
                    description: conversation not found

    /users/{id}/conversations/{convId}/photo:
        parameters:
            - name: id
              in: path
              description: ID of the user
              required: true
              schema:
                  type: string
            - name: convId
              in: path
              description: ID of the conversation
              required: true
              schema:
                  type: string
        put:
            tags: [conversations]
            summary: change the photo of a conversation
            requestBody:
                content:
                    application/json:
                        schema:
                            type: string
                            format: byte
                required: true
            responses:
                '200':
                    description: photo changed
                '400':
                    description: user id not found
                '401':
                    description: Unauthorized
                '404':
                    description: conversation not found
    /conversations/all:
        get:
            tags: [conversations]
            summary: Get all conversations
            description: Returns all conversations in the database (for user picker or admin).
            operationId: getAllConversations
            responses:
                '200':
                    description: List of all conversations
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/Conversation'
                '500':
                    description: Internal server error
