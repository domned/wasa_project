# Build stage
FROM golang:1.21-alpine AS builder

# Set working directory
WORKDIR /app

# Install build dependencies
RUN apk add --no-cache gcc musl-dev sqlite-dev

# Copy go mod files
COPY go.mod go.sum ./

# Download dependencies
RUN go mod download

# Copy source code
COPY . .

# Build the application
RUN CGO_ENABLED=1 GOOS=linux go build -a -installsuffix cgo -o webapi ./cmd/webapi

# Final stage
FROM alpine:latest

# Install runtime dependencies
RUN apk --no-cache add ca-certificates sqlite wget

# Create non-root user for security
RUN addgroup -g 1000 -S appuser && \
    adduser -u 1000 -S appuser -G appuser

# Set working directory
WORKDIR /app

# Copy the binary from builder stage
COPY --from=builder /app/webapi ./webapi

# Copy any necessary config files
COPY --from=builder /app/demo/config.yml ./demo/

# Copy entrypoint script that will recreate the DB on container start
COPY docker-entrypoint.sh ./docker-entrypoint.sh

# Make the binary executable and change ownership
RUN chmod +x ./webapi && \
    chown appuser:appuser ./webapi
RUN chmod +x ./docker-entrypoint.sh && \
    chown appuser:appuser ./docker-entrypoint.sh

# Create directory for database and set permissions
RUN mkdir -p /data && \
    chown -R appuser:appuser /data /app

# Switch to non-root user
USER appuser

# Expose port
EXPOSE 3000

# Set environment variables
ENV CFG_DB_FILENAME=/data/app.db
ENV PORT=3000

# Use entrypoint to remove DB and then run the application
ENTRYPOINT ["/app/docker-entrypoint.sh"]
CMD ["/app/webapi"]
